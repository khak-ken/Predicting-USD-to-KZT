audHWforecast[["model"]][["x"]]
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
plot.ts(tsAud)
plot.ts(tsAud)
plot.ts(tsAud)
plot.ts(tsAud)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=30)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=30)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
audHWforecast[["lower"]]
audHWforecast[["upper"]]
audHWforecast[["mean"]]
View(audHWforecast)
audHWforecast["lower"]
audHWforecast[["x"]]
audHWforecast[["lower"]][1]
audHWforecast[["lower"]][1,]
audHWforecast[["lower"]][0,1]
audHWforecast[["lower"]][1:25]
audHWforecast[["lower"]][1:30]
a<-audHWforecast[["lower"]][1:30]
a<-data.frame(a=audHWforecast[["lower"]][1:30])
View(a)
View(a)
a<-data.frame(80prt=audHWforecast[["lower"]][1:30])
a<-data.frame(eighty_pct=audHWforecast[["lower"]][1:30])
audHWforecast[["upper"]][1:30]
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:30],eighty_pct_to=audHWforecast[["upper"]][1:30])
View(a)
ninety_pct_from=audHWforecast[["lower"]][,1:30]
ninety_pct_from=audHWforecast[["lower"]][1:30,2]
audHWforecast[["lower"]][1:30,2]
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:30],eighty_pct_to=audHWforecast[["upper"]][1:30],
ninety_pct_from=audHWforecast[["lower"]][1:30,2],ninety_pct_to=audHWforecast[["upper"]][1:30,2])
View(a)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=30)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:30],eighty_pct_to=audHWforecast[["upper"]][1:30],
ninety_pct_from=audHWforecast[["lower"]][1:30,2],ninety_pct_to=audHWforecast[["upper"]][1:30,2])
View(a)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=90)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:90],eighty_pct_to=audHWforecast[["upper"]][1:90],
ninety_pct_from=audHWforecast[["lower"]][1:90,2],ninety_pct_to=audHWforecast[["upper"]][1:90,2])
View(a)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=90)
dev.new()
plot(forecast(audHWforecast))
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=90)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:90],eighty_pct_to=audHWforecast[["upper"]][1:90],
ninety_pct_from=audHWforecast[["lower"]][1:90,2],ninety_pct_to=audHWforecast[["upper"]][1:90,2])
plot(audHWforecast$residuals,dnormResiduals,col="blue")
View(audHWforecast)
audHWforecast[["residuals"]]
dnormResiduals
dnormResiduals <-
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dnormResiduals
plot(cars)
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
plot(cars)
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/")
#install.packages("readxl") # CRAN version
library("xlsx")
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
rates=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
## convert into date format
rates$Date <- as.Date(train$Date, "%Y-%m-%d")
str(rates$Date)
range(rates$Date)
rates <- rates[order(rates$Date), ]
## plot time series
plot(rates$Date, rates$USD, type = "l")
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
rates=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
## convert into date format
rates$Date <- as.Date(train$Date, "%Y-%m-%d")
str(rates$Date)
range(rates$Date)
rates <- rates[order(rates$Date), ]
## plot time series
plot(rates$Date, rates$USD, type = "l")
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
head(rates$Date, 20)
years <- format(rates$Date, "%Y")
tab <- table(years)
tab
## number of days per year after removing 2014
mean(tab[1:(length(tab) - 1)])
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
result.arima <- forecastArima(rates, n.ahead = 90)
result.stl <- forecastStl(rates, n.ahead = 90)
plotForecastResult(result.stl, title = "Exchange rate forecasting with STL")
## exchange rate in 2019
result <- subset(result.stl, date >= "2019-01-01")
plotForecastResult(result, title = "Exchange rate forecasting with STL (2019)")
plotForecastResult(result.stl, title = "Exchange rate forecasting with STL")
result <- subset(result.stl, date >= "2019-01-01")
plotForecastResult(result, title = "Exchange rate forecasting with STL (2019)")
result.arima <- forecastArima(rates, n.ahead = 90)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
#Reference: https://bennyaustin.wordpress.com/2015/08/03/r-time-series/
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=90)
dev.new()
plot(forecast(audHWforecast))
#Reference: https://bennyaustin.wordpress.com/2015/08/03/r-time-series/
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
train=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
aud<-train$USD
##Time series
tsAud <- ts(aud,frequency=7)
plot.ts(tsAud)
##Decompose TS to find trend and seasonal variations
tsAudComp <- decompose(tsAud)
dev.new()
plot.ts(tsAudComp$seasonal)
dev.new()
plot.ts(tsAudComp$trend)
##Remove seasonal variations (if any)
tsAudSeasonalAdjusted <- tsAud -tsAudComp$seasonal
dev.new()
plot.ts(tsAudSeasonalAdjusted )
##Holt Winters Exponential Smoothing of TS
audHW <-HoltWinters(tsAudSeasonalAdjusted ,beta=FALSE,gamma=FALSE)
dev.new()
plot(audHW )
##Holt Winters TS Forecast
library(forecast)
audHWforecast <- forecast:::forecast.HoltWinters(audHW,h=90)
dev.new()
plot(forecast(audHWforecast))
##Check for correlation in expected vs observed values (errors)
##plot.ts(audHWforecast$residuals)
hist(audHWforecast$residuals, col="yellow")
dnormResiduals <- dnorm(audHWforecast$residuals,mean=mean(audHWforecast$residuals), sd=sd(audHWforecast$residuals) )
dev.new()
plot(audHWforecast$residuals,dnormResiduals,col="blue")
a<-data.frame(eighty_pct_from=audHWforecast[["lower"]][1:90],eighty_pct_to=audHWforecast[["upper"]][1:90],
ninety_pct_from=audHWforecast[["lower"]][1:90,2],ninety_pct_to=audHWforecast[["upper"]][1:90,2])
write.csv(a, file = "USD Prediction with HoltWinters.csv", row.names = TRUE)
View(result.stl)
View(result.stl)
View(result)
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
rates=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
## convert into date format
rates$Date <- as.Date(train$Date, "%Y-%m-%d")
str(rates$Date)
range(rates$Date)
rates <- rates[order(rates$Date), ]
## plot time series
plot(rates$Date, rates$USD, type = "l")
head(rates$Date, 20)
years <- format(rates$Date, "%Y")
tab <- table(years)
tab
## number of days per year after removing 2014
mean(tab[1:(length(tab) - 1)])
###Forecasting with ARIMA
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
write.csv(result.arima, file = "Forecasting with ARIMA (2019).csv", row.names = TRUE)
###Forecasting with STL
result.stl <- forecastStl(rates, n.ahead = 90)
plotForecastResult(result.stl, title = "Exchange rate forecasting with STL")
## exchange rate in 2019
result <- subset(result.stl, date >= "2019-01-01")
plotForecastResult(result, title = "Exchange rate forecasting with STL (2019)")
write.csv(result, file = "Forecasting with STL (2019).csv", row.names = TRUE)
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
rates=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
## convert into date format
rates$Date <- as.Date(train$Date, "%Y-%m-%d")
str(rates$Date)
range(rates$Date)
rates <- rates[order(rates$Date), ]
## plot time series
plot(rates$Date, rates$USD, type = "l")
head(rates$Date, 20)
years <- format(rates$Date, "%Y")
tab <- table(years)
tab
## number of days per year after removing 2014
mean(tab[1:(length(tab) - 1)])
###Forecasting with ARIMA
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
write.csv(result.arima, file = "Forecasting with ARIMA (2019).csv", row.names = TRUE)
###Forecasting with STL
result.stl <- forecastStl(rates, n.ahead = 90)
plotForecastResult(result.stl, title = "Exchange rate forecasting with STL")
## exchange rate in 2019
result <- subset(result.stl, date >= "2019-01-01")
plotForecastResult(result, title = "Exchange rate forecasting with STL (2019)")
write.csv(result, file = "Forecasting with STL (2019).csv", row.names = TRUE)
# Reference: http://www.rdatamining.com/examples/time-series-forecasting
setwd("C:/Users/nhlr/OneDrive - Chevron/Documents/CurrKZT")
#install.packages("readxl") # CRAN version
library("xlsx")
library(readxl)
rates=read_excel("Official_Foreign_Exchange_Rates_NBRK_on_29_12_2018.xls")
## convert into date format
rates$Date <- as.Date(train$Date, "%Y-%m-%d")
str(rates$Date)
range(rates$Date)
rates <- rates[order(rates$Date), ]
## plot time series
plot(rates$Date, rates$USD, type = "l")
head(rates$Date, 20)
years <- format(rates$Date, "%Y")
tab <- table(years)
tab
## number of days per year after removing 2014
mean(tab[1:(length(tab) - 1)])
###Forecasting with ARIMA
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(rates, n.ahead = 90)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Exchange rate forecasting with ARIMA")
write.csv(result.arima, file = "Forecasting with ARIMA (2019).csv", row.names = TRUE)
result.stl <- forecastStl(rates, n.ahead = 90)
plotForecastResult(result.stl, title = "Exchange rate forecasting with STL")
## exchange rate in 2019
## exchange rate in 2019
result <- subset(result.stl, date >= "2019-01-01")
plotForecastResult(result, title = "Exchange rate forecasting with STL (2019)")
write.csv(result, file = "Forecasting with STL (2019).csv", row.names = TRUE)
